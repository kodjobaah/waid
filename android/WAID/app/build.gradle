import org.apache.tools.ant.taskdefs.condition.Os
import java.util.regex.Pattern

apply plugin: 'com.android.application'

android {
    compileSdkVersion 22
    buildToolsVersion '22.0.1'


    project.ext.versionCodes = ['armeabi':1, 'armeabi-v7a':2, 'arm64-v8a':3, 'mips':5, 'mips64':6, 'x86':8, 'x86_64':9] //versionCode digit for each supported ABI, with 64bit>32bit and x86>armeabi-*

    android.applicationVariants.all { variant ->
        // assign different version code for each output
        variant.outputs.each { output ->
            output.versionCodeOverride =
                    project.ext.versionCodes.get(output.getFilter(com.android.build.OutputFile.ABI), 0) * 1000000 + defaultConfig.versionCode
        }
    }

    defaultConfig {
        applicationId "com.waids"
        minSdkVersion 15
        targetSdkVersion 21
        //versionCode getVersionCodeFromManifest()
        versionCode 110
        versionName "1.09"
        multiDexEnabled true

    }

    buildTypes {


        debug {
            applicationIdSuffix ".debug"
            minifyEnabled false
            debuggable true
            jniDebuggable true
            renderscriptDebuggable true
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }

    sourceSets.main {
        jniLibs.srcDir 'src/main/libs' //set .so files location to libs instead of jniLibs
        jni.srcDirs = [] //disable automatic ndk-build call
    }

    // add a task that calls regular ndk-build(.cmd) script from app directory
    task ndkBuild(type: Exec) {
        def ndkDir = plugins.getPlugin('com.android.application').sdkHandler.getNdkFolder()
        if (Os.isFamily(Os.FAMILY_WINDOWS)) {
            commandLine "$ndkDir\ndk-build.cmd", '-C', file('src/main/jni').absolutePath

        } else {
            commandLine "$ndkDir/ndk-build",
                    'NDK_DEBUG=1',
                    '-C', file('src/main/jni').absolutePath
            //commandLine "$ndkDir/ndk-build",
            //        'NDK_PROJECT_PATH=build',
            //        'APP_BUILD_SCRIPT=src/main/jni/Android.mk',
            //        'NDK_APPLICATION_MK=src/main/jni/Application.mk'

        }
    }



    // add this task as a dependency of Java compilation

    tasks.withType(JavaCompile) {
        compileTask -> compileTask.dependsOn ndkBuild
    }


    packagingOptions {
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/LICENSE.txt'
    }
}

task copyNativeLibs(type: Copy, dependsOn:'ndkBuild') {
    from("${getProjectDir()}/src/main/libs") { include '**/*.so' }
    into("${getProjectDir()}/src/main/jnilibs")
}

def getVersionCodeFromManifest() {
    def manifestFile = file(android.sourceSets.main.manifest.srcFile)
    def pattern = Pattern.compile("versionCode=\"(\\d+)\"")
    def matcher = pattern.matcher(manifestFile.getText())
    matcher.find()
    return Integer.parseInt(matcher.group(1))
}

task ndkLibsToJar(type: Zip, dependsOn: 'ndkBuild', description: 'Create a JAR of the native libs') {
    destinationDir new File(buildDir, 'libs')
    baseName 'ndk-libs'
    extension 'jar'
    from(new File(buildDir, 'libs')) { include '**/*.so' }
    into 'lib/'
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile 'com.android.support:support-v4:22.2.1'
    compile 'com.android.support:appcompat-v7:22.2.1'
    // compile 'com.google.android.gms:play-services:7.5.0'
    compile 'com.android.support:gridlayout-v7:22.2.0'
    // compile project(':openCVLibrary300')
    compile 'org.twitter4j:twitter4j-core:4.0.2'
    compile 'com.facebook.android:facebook-android-sdk:4.5.0'
    compile project(':openCVLibrary249')
    compile project(':linkedin-sdk')
}
